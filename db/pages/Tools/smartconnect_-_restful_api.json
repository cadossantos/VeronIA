{
  "url": "https://wiki.smartsimple.com/wiki/JSON_API_(SmartConnect)",
  "title": "SmartConnect - RESTful API",
  "content": "From SmartWiki\n(Redirected from \nJSON API (SmartConnect)\n)\n Jump to: \nnavigation\n, \nsearch\nContents\n1\n \nOverview\n2\n \nPrerequisites\n3\n \nConfiguration - Essentials\n3.1\n \nInitial Setup\n3.2\n \nFunction Definition\n3.2.1\n \nField List Syntax\n3.3\n \nUsage\n3.3.1\n \nPosting Endpoints\n3.3.2\n \nMessage Body\n3.3.3\n \nPOST Response\n3.3.4\n \nImportant Notes\n3.3.4.1\n \nUsing Update Functions\n3.3.4.2\n \nUpdate Behaviour\n3.3.4.3\n \nUsing List Functions\n3.3.4.4\n \nReport Permission using API Report Function\n3.3.5\n \nError Messages\n4\n \nConfiguration - Advanced\n4.1\n \nAPI User Access Tokens\n5\n \nAppendix\n5.1\n \nStandard Field Names\n5.2\n \nOptions and Settings\n5.2.1\n \nAvailable Record Types\n5.2.2\n \nAvailable Action Types\n5.2.3\n \nPagination\n5.2.4\n \nSearching of Empty or Non-empty Values\n5.2.5\n \nExclude (or include) archived UTA Records\n5.2.6\n \nHourly API Call Limit\n6\n \nSmartConnect Examples\nOverview\nSmartSimple's SmartConnect API provides a relatively easy to use method of integrating SmartSimple information with other web services and systems. It is a RESTful API and loosely follows the principles of REST integration.\n This API uses industry standard JSON syntax and constructs. If you are not familiar with JSON you should take a look at the \nfollowing tutorial\n before venturing much further in this topic.\n If you wish to export and import large amounts of information then this API should not be used.\n This API does not place metering restrictions as to the number of records that can be retrieved by a single API query.  However retrieving a large number of records (greater than 1000 records) will have a negative impact on performance and may cause the query to fail. \nPrerequisites\n This API is only available for SmartSimple environments on the November 2015 release or later. We recommend you upgrade to the latest available release for the most up to date API functionality.\nConfiguration - Essentials\nInitial Setup\nYou will need an active SmartSimple user account in order to make any API calls. There are two modes of operation for this API, and if you are planning on making remote calls you will first need to create and activate an API type user.\n \nActive session\n: Where a user is already logged into SmartSimple with an active session and makes an API call from their web browser, e.g. an AJAX call. The user's existing session is used to authenticate the API call.\n \nRemote call\n: Where an external system makes an API call. For this method, a user account of type API Access is required to authenticate the API call. \n \nRoles and access setting of a user to be used for remote calls.\nFunction Definition\nIn order to use the API, you must first define the set of functions you wish to make available within SmartSimple. This is an added layer of security that lets you limit the available functions as well as field sets that you wish to expose through the API.\n Within your SmartSimple instance, define an API function within the Global Settings -> Integrations -> SmartConnect API screen.\n In this screen you will find options for \nRecord Type\n, \nAction Type\n, and \nField List\n that define respectively, the type of record, the action to perform, and the field list that will be exposed for this function.\n After saving your function, take note of the \nAPI Token\n as you will need to include this in your API calls to identify this pre-defined function.\nHere is a more detailed look at \ncreating SmartConnect functions\n.\nField List Syntax\nThe \nField List\n option within the function configuration is used to define which fields are retrievable through the function call. This is a free form text box in which you will need to construct your field list with the following syntax:\nSyntax\nDescription\nExample\nsf_\nStandardFieldName\nStandard fields are denoted by their name, preceded by a prefix of 'sf_'.\nSee Appendix for a list of Standard Field names for each object.\nsf_First Name\ncf_\nCustomFieldName\ncf_\nCustomFieldID\nCustom fields are denoted by their field name, preceded by a prefix of 'cf_'.\nWhile it is best practice to reference the field name, you may also reference the field ID.\ncf_My Custom Field\ncf_12345\n;;\nField Separator. Multiple fields are separated using the literal characters ';;'\nsf_First Name;;cf_My Custom Field\nUsage\nMake sure that SmartConnect API functions were created in the instance before proceeding to using the API.\nPosting Endpoints\nTo make an API call you will need to post to the appropriate endpoint which will simply be based on the \nRecord Type\n of the API function. The general endpoint will be in the form of:\n/API/\nAPIVersion\n/\nrecordtype\n/\nThe full list of endpoints is below.\nRecord Type\nEndpoint\nExample\nReport\n/API/1/report/\nhttps://example.smartsimple.com/API/1/report/\nCompany\n/API/1/company/\nhttps://example.smartsimple.com/API/1/company/\nUser\n/API/1/user/\nhttps://example.smartsimple.com/API/1/user/\nSystem Variables\n/API/1/sysvar/\nhttps://example.smartsimple.com/API/1/sysvar/\nUTA Level 1\n/API/1/levelone/\nhttps://example.smartsimple.com/API/1/levelone/\nUTA Level 2\n/API/1/leveltwo/\ntps://example.smartsimple.com/API/1/leveltwo/\nUTA Level 3\n/API/1/levelthree/\nhttps://example.smartsimple.com/API/1/levelthree/\nUTA Level Transaction\n/API/1/transactions/\nhttps://example.smartsimple.com/API/1/transactions/\nAs of August 2022 upgrade, APIVersion=2 is now available. This version has standardized syntax and format of requests and responses.\nMessage Body\nThe message body that you post will need to include various parameters depending on the \nRecord Type\n and \nAction Type\n being used. The required and optional parameters will be listed for each different function on the configuration page of each SmartConnect function.\nAt minimum, you will always need to include the following parameters:\n \nurl\n: String containing the URL to which the request is sent\n \napitoken\n: Encrypted token generated and associated to each SmartConnect function.\n \njsonrset\n (update functions only): JSON array containing one or more records to update. The top node should be named 'records', with each sub-node representing a record to update. Each record sub-node is identified by a 'recordid' value that is the unique SmartSimple ID for that record (e.g. userid for a user/contact record), and must include every field and only fields that were defined in the field list of the SmartConnect function. If the field value is not being changed, set it to the current value.\nIf you are making a remote call from an external system you will also need to include:\n \nusername\n: The email address of an active API type user account.\n \npassword\n: The corresponding password to the above user account.\n \ncompanyid\n: The root companyid of your SmartSimple instance. This is the companyid of the organization at the root of your instance.\n \nalias\n: The web alias of your SmartSimple instance. This will typically be the leading portion of your instance URL, and can be found in your Global Settings -> Branding configuration. E.g. for https://example.smartsimple.com the alias would be 'example'.\nSample call within SmartSimple instance:\nfunction api_call() {\n $.ajax({\n method: \"POST\",\n type: \"POST\",\n url: \"/API/1/levelone/\",\n data: {\n apitoken: \"QlwYYlJERHVASmlfXWtTWklbXEt9UHpmDw4~\",\n recordid: 1234567,\n },\n dataType: \"html\"\n })\n .done(function(data) {\n json = JSON.parse(data);\n });\n}\nPOST Response\nWith every successful request an HTTP status of 200 is returned along with a JSON response body that contains the recordset.\nSample response format for GET/LIST call based on configured field list:\n{\n \"records\":[\n {\n \"sf_Description\":\"0959-3985\",\n \"sf_Transaction ID\":\"6048788\",\n \"sf_Created Date\":\"2015-07-23 11:03:17\",\n \"sf_End Date\":\"2015-07-23 11:03:17\",\n \"sf_Subject\":\"API Test\",\n \"sf_Object ID\":\"0\",\n \"sf_Start Date\":\"2015-07-22 00:00:00\",\n \"sf_Modified Date\":\"2018-05-09 11:14:58\",\n \"sf_Type\":\"Publications\",\n \"sf_Created By\":\"SmartSimple Support\",\n }\n ],\n \"message\":{\n }\n}\nFor record updates and creation, the response body will simply return the recordid and a status of \"Updated Successfully\".\nSample response format for UPDATE call:<br />\n{\n \"records\":[\n {\n \"recordid\":\"6048788\",\n \"recordindex\":1,\n \"status\":\"updated successfully\"\n }\n ],\n \"message\":{\n }\n}\nImportant Notes\nUsing Update Functions\nHere are some important notes to be aware of when calling update functions.\n Date field values should be written in the format of YYYY-MM-DD.\n Field types with pre-defined options, e.g. Select One, and Select Many type fields, need to be set with their stored value options, rather than their display captions. For example, a field where you have defined options like \"1=Yes;2=No\" needs to be set by the values \"1\" or \"2\".\n The update functions can also be used to create new records. This can be done by setting the recordid to 0. The response will then return the recordid of the new record created.\nUpdate Behaviour\nPlease note when performing updates that the system behaviour will be similar to that of saving the record in the regular browser interface. Namely, the following will occur:\n Any existing and applicable template formulas will be triggered and run after a record update.\n Any existing and applicable workflows will be triggered and run after a record update.\n Any existing and applicable status-triggers will run for any status change after a record update.\nUsing List Functions\n The number of records returned by a single SmartSimple API call is capped to 10000 records. If the criteria of your API call matches more than 10000 records, you will need to leverage the pagination parameters in order to make multiple calls to page through the results and return the full data set.\nCustom parameters for List Functions are:\n criteria - this is an optional json array. This contains the following nodes: \"andor\", \"field\", \"operator\" and \"value\"\n Values of each nodes:\n \"andor\" - either \"and\" or \"or\"\n \"field\" - name of the standard/custom field to set the condition to\n \"operator\" - can use the following: =,>,>=,<=,<,<>,!=,like,not like\n \"value\" - value for the filter\n \nsample1: \n criteria: [{\"andor\":\"and\",\"field\":\"FIELDNAME\",\"operator\":\"like\",\"value\":\"PATTERN\"},{\"andor\":\"and\",\"field\":\"FIELDNAME2\",\"operator\":\"isempty\",\"value\":\"true\"}]\n sortby: [{\"field\":\"FIELDNAME\",\"direction\":\"asc\"}]\n othersettings : {\"getstorevalue\":\"1\",\"keyformat\":\"0\"}\n \nsample2: \n criteria: [{\"andor\":\"and\",\"field\":\"FIELDNAME1\",\"operator\":\"=\",\"value\":\"100\"},{\"andor\":\"or\",\"field\":\"FIELDNAME2\",\"operator\":\"like\",\"value\":\"PATTERN\"},{\"andor\":\"and\",\"field\":\"FIELDNAME3\",\"operator\":\"isempty\",\"value\":\"false\"}]\n sortby: [{\"field\":\"FIELDNAME\",\"direction\":\"desc\"}]\n othersettings : {\"getstorevalue\":\"0\",\"keyformat\":\"0\"}\n \nsample3:\n An example query with brackets: ( (cf_somefield1 like '%whatever%' or cf_somefield2 like  '%whatever%'  or cf_somefield3 like  '%whatever%'  or cf_somefield4like  '%whatever%' ) and (cf_someotherfield1='whatever' or cf_someotherfield2='whatever else'))\n criteria: [{ \"andor\": \"(\", \"field\": \"cf_somefield1\", \"operator\": \"like\", \"value\": \"whatever\" },{ \"andor\": \"or\", \"field\": \"cf_somefield2\", \"operator\": \"like\", \"value\": \"whatever\" },{ \"andor\": \"or\", \"field\": \"cf_somefield3\", \"operator\": \"like\", \"value\": \"whatever\" },{ \"andor\": \"or\", \"field\": \"cf_somefield4\", \"operator\": \"like\", \"value\": \"whatever\" },{ \"andor\": \") and (\", \"field\": \"cf_someotherfield1\", \"operator\": \"=\", \"value\": \"whatever\" },{ \"andor\": \"or\", \"field\": \"cf_someotherfield2\", \"operator\": \"=\", \"value\": \"whatever else\" }]\n sortby: \n othersettings : {\"getstorevalue\":\"0\",\"keyformat\":\"0\"}\n sortby - this is an optional json array. This contains the following nodes: \"field\" and \"direction\"\n \"field\" - name of the standard/custom field to sort records by\n \"direction\" - either \"asc\" (for ascending) or \"desc\" (for descending)\n othersettings\n getstorevalue - this is an optional settings for the json array. Options are: int type: \n0\n - to get display value, \n1\n to get stored value (value from the database eg. $25,000 vs 25000)\n keyformat - this is an optional settings for the json array. Options are: \n0\n - to use what is configured in the Field List form the SmartConnect Function, \n1\n - to use the custom field names / standard field names and \n2\n - to use the custom field ID\nReport Permission using API Report Function\nBy default, the \nusers\n that are able to see any reports thru the API Function are \nusers\n with the \nManager permission\n – \nreports\n. \nPlease make sure that the role of the active SmartSimple user account has the permission to view the reports. \nHere is the link on how to allow reports to be shared with \nusers\n in the API Report Function: \nSharing Reports with People\nError Messages\nFor failed requests, SmartSimple returns HTTP 4xx status codes.\nThe most common case is HTTP 401 Unauthorized which could indicate one of the following:\n Invalid authentication credentials provided.\n User Account type is not of \"API User\".\n If performing remote calls, make sure the companyid parameter is correct.\nIf the request is successful and the response is blank, review the following troubleshooting steps:\n Ensure the apitoken parameter is correct.\n If updating, ensure the recordid is correct.\n Ensure the post endpoint URL is pointing to the correct resource.\nError and status messages vary from different API calls and are based on the records in the API calls. \nOther generic error messages on failed API request:\n\"Invalid API Token\"\n\"Number of API Calls within the hour have reached the maximum limit, please try again later\"\n\"Invalid URL: URL should start with https://.\"\n\"Invalid API Request, request is empty or null\"\n\"Encountered error while processing other setting parameters\"\n\"Encountered error while processing record\"\n\"Encountered error while processing list\"\n\"Recordset does not exist\"\n\"Requested record does not exist\"\n\"No records\"\n\"SmartConnect API function configuration error, association type missing from Field List of function\"\n\"Invalid record id\"\n\"No content or empty content argument provided.\"\n\"No objectid argument provided.\"\n\"No object type argument provided.\"\n\"Consumer Provider link not configured in SmartConnect API settings\"\n\"Requested field does not match with the object type\"\n\"Requested field not found\"\n\"Requested list does not have field list defined\"\n\"You do not have permission to view this report.\"\n\"Search keywords can not be empty\"\nConfiguration - Advanced\nAPI User Access Tokens\nYou can use user access tokens for authentication instead of providing username + password in your API call. To create user access tokens for API users, got to SmartConnect API - API Users (tab), click into an API user in the list and click the Generate New Token button.\n \nGenerate user access token for API user.\nUse the token in Authorization header as: Bearer xxxxxxxxxxxx in your API call. This will replace the username and password in your API call.\n \nExample call in Postman.\nAppendix\nStandard Field Names\nSee \nSmartConnect Standard Field Names\n for a list of all available Standard Fields that you can reference along with update restrictions.\nThe standard fields available for reference varies on the Record Type selected in the API call.\nOptions and Settings\nAvailable Record Types\nRecord\nDescription\nReport\nRun a report and retrieve the results.\nCompany\nOrganization records.\nUser\nContact records.\nSystem Variables\nGlobal System Variables.\nUTA Records\nUTA records, including Level 1, 2, 3, and transactions.\nAvailable Action Types\nThe following is a full list of available actions. Please note that not all actions will be available for all record types.\nAction\nDescription\nGet\nRetrieve a single record for the record type you have selected in the function.\nList\nRetrieve multiple records for the record type you have selected in the function.\nUpdate\nUpdate one or more fields for the specified record/s. Update is also used to create new records.\nGet Meta\nRetrieve the configuration settings for a UTA with respect to Level 1/2/3 attributes such as types, statuses, field definitions.\nUpdate Meta\nUpdate the configuration settings for a UTA with respect to Level 1/2/3 attributes such as types, statuses, field definitions.\nDownload File\nDownload a single file from a specified record and field. \nList Files\nRetrieves a list of files from a specified record and field.\nSearch Files\nRetrieve a list of files across a specific object type via keyword search of the file contents. Upload fields searched are restricted based on the field list specified in the api call. See \nIndexing Multiple and Single File fields.\nUpdate Associations\nUpdate one or more fields in the association table between two records. Update is also used to create new association records. E.g. The contacts or organizations associated to a UTA Level 1 record.\nList Associations\nRetrieves a list of associations for the specified record. E.g. The contacts or organizations associated to a UTA Level 1 record.\nList Multiple Addresses\nRetrieves a list of addresses for the specified contact or organization record.\nUpdate Multiple Addresses\nUpdate one or more fields for the specified address for a contact or organization record. Update is also used to create new address records.\nVariables Replace\nReturns formatted content processed by the variable processor from a specified record.  The system will replace all variables within the content parameter with variable values from that record.  E.g. Passing in \"Hello @firstname@\" as content for a contact named John Smith will return \"Hello John\".\nPagination\n4 new parameters are introduced and should be put inside the \"\nothersettings\n\" in json object for the API call\n-\n recordstart, recordend, recordsperpage, pagenum\n*Note: othersettings parameter is also used for other settings introduced earlier, ie. getstorevalue and keyformat, so your othersettings json can look something like this:\n{\"getstorevalue\":\"1\",\"keyformat\":\"1\",\"recordsperpage\":100,\"recordstart\":1000}\nNote: only up to 10000 records will be returned for each API call, so multiple API calls will be required to display all records with respective pagination parameters\nReturned json response will include the following (in the message json node) for all records, despite the above parameters have been set or not, results are based on the order by (sortby declared in API call or by default order by, eg. order by L1 ID asc):\n- \nrecordfrom\n (starts from record number xxx)\n- \nrecordto\n (last record number returned xxx)\n- \nrecordcount\n (number of records returned in this API call)\n- \nallcount\n (number of records in total without the limit)\nReturned Response:\ne.g. \"message\":{\"recordto\":424,\"recordcount\":100,\"allcount\":460,\"recordfrom\":325}\nPriority of operations with the 4 new parameters:\n1. when recordend > 0, only recordstart and recordend parameter will be taken into consideration, eg.\nothersettings: {\"recordend\":35} - will return records from start up to and including 35th record, total records = 35\nothersettings: {\"recordstart\":10,\"recordend\":35} - will return 10th to 35th record, total records = 26\nothersettings: {\"recordstart\":10,\"recordend\":350,\"recordsperpage\":100} - will ignore recordsperpage because you have specified the start and end, return record 10 to 350, total 341 records\n2. pagenum > 0 and recordsperpage > 0, (to use pagenum, recordsperpage has be to specified), will ignore recordstart and recordend\nothersettings: {\"recordsperpage\":50,\"pagenum\":2} - return records 51-100\nothersettings: {\"recordsperpage\":100,\"recordstart\":12,\"pagenum\":1} - will ignore recordstart, return records 1-100\nothersettings: {\"recordsperpage\":100,\"recordstart\":12,\"pagenum\":3} - will ignore recordstart, return records 201-300\n3. recordsperpage > 0\nothersettings: {\"recordsperpage\":100} - return record 1 to 100\nothersettings: {\"recordsperpage\":100,\"recordstart\":1} - return record 1 to 100\nothersettings: {\"recordsperpage\":100,\"recordstart\":101} - return record 101 to 200\nothersettings: {\"recordsperpage\":100,\"recordstart\":325} - return record 325 to 424\n4. recordstart > 0\nothersettings: {\"recordstart\":12}, return all records starting from record 12, up to only 10000 number of records\nSearching of Empty or Non-empty Values\nAdd criteria to search for records where a field is empty or not. You may now include an operator of isempty, with a corresponding value of either true or false, within a criteria in order to search for records based on either empty or non-empty value.\ne.g. criteria:[{\"andor\":\"and\",\"field\":\"cf_123456\",\"operator\":\"isempty\",\"value\":\"true\"}]\nExclude (or include) archived UTA Records\nNew parameters introduced to exclude archived UTA records and should be put inside the \"\nothersettings\n\" in json object for the API call\nincludearchive\n - if you don't put this node or use {\"includearchive\":1} , it will include everything in the search, to exclude archived records, set the parameter to 0\ne.g. if you want to set pagination for 100 per page and \nexclude\n archived UTA records:\nothersettings: {\"recordsperpage\":100,\n\"includearchive\":0\n}\nHourly API Call Limit\nAPI calls in excess of 1000 per instance within the past hour will receive an error and blocked from using API until the total API calls count in the last hour drops below the limit.\nSmartConnect Examples\nSee our \ninteractive demonstration page\n for a demo and live sample of how the API works. This page is connected to a specific demonstration instance containing sample data.\nWe strongly encourage you to review this page in order to gain a better understanding of the syntax and functionality of the API.\nSee \nAPI examples\n for a sample list of SmartConnect calls.\n \n Retrieved from ‘\nhttps://wiki.smartsimple.com/index.php?title=SmartConnect_-_RESTful_API&oldid=43124\n’ \nCategories\n: \nIntegration\nAPI\nSmartConnect RESTful API",
  "links": [
    "https://wiki.smartsimple.com/wiki/Creating_SmartConnect_Functions",
    "https://wiki.smartsimple.com/wiki/User",
    "https://wiki.smartsimple.com/wiki/User",
    "https://wiki.smartsimple.com/wiki/Manager_Permission_%E2%80%93_Reports_and_Dashboards",
    "https://wiki.smartsimple.com/wiki/User",
    "https://wiki.smartsimple.com/wiki/Sharing_Reports_with_People_-_Overview",
    "https://wiki.smartsimple.com/wiki/Indexing_Multiple_and_Single_File_Fields",
    "https://wiki.smartsimple.com/wiki/API_Sample_Code"
  ],
  "images": [
    "https://wiki.smartsimple.com/images/7/7f/Access_type_API.png",
    "https://wiki.smartsimple.com/images/0/0d/GenerateUserToken.png",
    "https://wiki.smartsimple.com/images/2/2f/BearerUserToken.png"
  ]
}