{
  "url": "https://wiki.smartsimple.com/wiki/Excel_Parser",
  "title": "Excel Parser",
  "content": "From SmartWiki\n Jump to: \nnavigation\n, \nsearch\nContents\n1\n \nOverview\n1.1\n \nWhat and Why\n1.2\n \nUse Cases\n1.3\n \nBest Practices\n2\n \nConfiguration – Essentials\n2.1\n \nThe process from the applicants perspective\n2.2\n \nPreparing the Spreadsheet\n2.3\n \nNaming Cells\n2.4\n \nLocking The Excel Spreadsheet\n2.5\n \nUpload the Spreadsheet to a SmartFolder\n2.6\n \nCreate a Download Link\n2.7\n \nConfiguring the Multi-File Upload Field\n2.8\n \nField Mappings on the Multi-File Upload Field\n2.9\n \nUpdating Existing Custom Fields and Activities\n3\n \nConfiguration - Advanced\n3.1\n \nActivity Syntax and Field Mappings\n3.2\n \nSame Record Syntax and Field Mappings\n4\n \nSettings Explained\n4.1\n \nField Mappings Syntax for Same Record\n5\n \nTroubleshooting Tips\nOverview\nWhat and Why\nThe Excel Parser feature gives your applicants the ability to complete their budgets using the Microsoft Excel application offline, and then the applicant can upload the completed Excel spreadsheet into your system later. The data contained within the spreadsheet will be used to populate custom fields in your system, or the data can be used to generate multiple activities. This feature may be a better option than using the \nAdvanced Data Table\n custom field as this feature is well suited for complex budgets or tables of information with many columns.\nThis article will show you how to: set up Platform3 and an Excel spreadsheet to work with the Excel Parser process so your community can upload spreadsheets to populate their applications and generate activities.\nYou need to have \nGlobal Administrator\n access to setup or edit the elements used in the Excel Parser process. You also need to have \nMicrosoft Excel\n to set up the spreadsheet that users will complete and upload.\nUse Cases\nExcel Parser is typically used for complex tables of information with many columns as found in budgets. This is an alternative to using the \nAdvanced Data Table\n custom field which can be laborious to fill in and complicated to set up. It is also used to create activities such as budget items or project milestones. The Excel Parser may also be advantageous when you want to request lots of information from an applicant but only want to work with or report on some of the information.\nBest Practices\nWhen configuring the Excel Parser you can either populate fields on the record or create activities for the record, not both.\nConfiguration – Essentials\nThe process from the applicants perspective\n Log into your instance and download the MS Excel template. \n \nSee instructions with a link to download the template the applicant needs to complete\n Complete and save the template. \n \nA sample completed Excel spreadsheet\n Upload the template and save the application.\n \nUploading the completed Excel spreadsheet\n Information in the template is parsed and mapped fields are populated and activities are created. \n \nActivities created when spreadsheet uploaded\n Optionally, you can delete the previously uploaded spreadsheet, then upload a new spreadsheet and save to update the information already in your system. \n \nSelect the uploaded spreadsheet and click the delete button then upload a new spreadsheet to update your values in the system. Note: new values appear on refresh or save.\nPreparing the Spreadsheet\nLet's set up an Excel spreadsheet that will create level two activities.\n Open Microsoft Excel and create a blank workbook.\n Setup the Excel Spreadsheet the way you want it to look by adding headings, applying cell formatting and entering formulas as desired.\n Set a background color to indicate the cells where you expect the user to enter information. We will lock the rest of the spreadsheet later. \n \nA sample spreadsheet formatted with formulas headings and background colors\nNaming Cells\nPlatform3 will need to know which cells you want to parse so we need to name those cells so we can refer to them later. We will do this by naming cells in Excel. You can name individual cells and groups of cells. In this example we are going to name individual cells only and use those to create activities.\n Give a name like \nSalaries\n to the header cell you want to parse into Platform3. I will use that named cell to populate a specific custom field value later.\n You can define the cell name in Excel by clicking on the desired cell, go to the \nFormulas\n tab and click \nDefine Name\n. Once a name has been defined for a cell you can see it in the \nName Box\n when the desired cell is selected. \n \nDefining a name for a cell, so we can refer to it later. The defined name shows up in the name box when a cell or group of cells is selected.\n Give a name like \nStartingSalaries\n to the first cell you want to parse into Platform3. I could give names to all the cells in this row but instead I chose to name the first cell and then I will refer to the other cells in the row using the syntax \n\"col_1\"\n, \n\"col_2\"\n, etc.\n You may wish to name other cells, for example I also named \nSalariesHeader\n and \nSalariesSubTotal\n so I could map to those as well.\nNote:\nYou can also use the \nName Manager\n in Excel to see and modify all cell names defined in your spreadsheet.\nLocking The Excel Spreadsheet\nNow that we have set up our Excel spreadsheet and named the cells we want to parse, we need to lock the spreadsheet. We will lock the entire spreadsheet except our desired cells so the applicant cannot add rows, columns or otherwise modify the spreadsheet as that could cause the parse process to fail.\n Click the box to the left of column A (in between column A and row 1). This will select all cells.\n \nSelect all cells in the spreadsheet by clicking between column A and row 1\n Right click the same box – select \nFormat Cells\n then click the \nProtection\n tab.\n Make sure the \"Locked\" checkbox is checked.\n \nMake sure all cells are locked\n Click \nOK\n (these first few steps make sure that all cells are locked. See steps 5-6 for unlocking individual cells).\n Right click just the cell(s) you wish to have editable by the end user (i.e. unlocked).\n Select \nFormat Cells\n then click the \nProtection\n tab. Then un-check the \nLocked\n box. This will \nunlock\n the cells that you want the end user to be able to edit.\n Click the \nReview\n tab, then click \nProtect Sheet\n (In older versions of Excel, this may be found under the \nTools\n menu, then \nProtection\n).\n Only allow the user to select unlocked cells and enter a password in the prompt to be used to un-protect the sheet.\n \nSpreadsheet is protected with a password to unlock\nUsers will now only be able to select and input into cells we unlocked in step #6. They won’t be able to insert or delete columns or rows, add comments, or any of the other actions.\nUpload the Spreadsheet to a SmartFolder\nNow that we have our spreadsheet setup for the applicant to use, we need to put that spreadsheet somewhere the applicant can get it. We will put the spreadsheet in a SmartFolder.\n In your instance of Platform3 go to the \nMenu Icon\n > \nSmartFolders\n.\n Create a new folder to hold the spreadsheet and call it something like \nExcel Parser\n (You could also place this in an existing folder).\n \nUpload Excel spreadsheet template to a SmartFolder\n Navigate to the Excel spreadsheet file and upload it into your SmartFolder\n Once the file has been uploaded, under \nFile Options\n change the drop down to \nView URL\n this will provide you with the link to the file we just uploaded \n \nView URL to see the path to the Excel spreadsheet template\n Copy the link to the spreadsheet into notepad and save it. We will use this link later. The link should look something like \nhttps://alias.smartsimple.com/files/1234567/f123456/activity-excel-parser.xlsx\nCreate a Download Link\nOnce you have uploaded the spreadsheet to a SmartFolder you need to provide a link for your applicants so they can download the spreadsheet template you expect them to complete. You could put a link in the instructions for the “Upload - Multiple Files Storage” custom field we will create later, but I have chosen to create a separate instructions field for greater visibility. Here is how you can create an instructions field with a link to download the Excel spreadsheet that the applicant will download and complete.\n Navigate to the desired UTA such as \nSubmission Manager\n and click the configuration settings buttons (looks like a gear).\n Go to the desired level tab, in my case it was a Level 1 called Grants.\n Click the \nCustom Fields\n link.\n Create a new custom field of the type \nDisplay - Instructions\n and call it something like \nBudget Instructions\n.\n For the content enter something like the following: \n \nContent for the plain text editor of a Display – Instructions custom field\n Now replace the link above that looks like /files/1234567/f123456/activity-excel-parser.xlsx with the link to the spreadsheet you uploaded to a SmartFolder in our previous steps. Remember to remove this part \nhttps://alias.smartsimple.com\n from your link. Always use relative links inside Platform3 to ensure they function correctly and work across environments.\n Save the custom field.\nAlternatively you could also add a button for the applicant to click in order to download the excel template. Below is the code you would use. Just as above you would need to update the relative path.\n \nCustom code to add a button to download the template.\n \nAn instructions custom field with link to download spreadsheet template\nConfiguring the Multi-File Upload Field\nPreviously we added instructions and a link so the applicant can download the Excel template. Now we need to create a field where the applicant can upload the completed template so it can be parsed. \n Go to the desired UTA configuration settings, click on the desired level tab, and click the \nCustom Fields\n link.\n Create a new custom field of the type \nUpload - Multiple Files Storage\n and call it something like \nUpload Budget\n.\n Set the \nCaption Location\n to \nAbove Field\n (this will give more space for longer captions and instructions).\n If you created an instructions custom field above, move to the next step, otherwise you can add instructions into this field as per the above using the relative link to the excel template.\n For \nButton Label\n enter something like \nUpload Completed Excel Template\n or \nUpload Completed Budget Template\n.\n If your applicants must upload a budget, toggle on \nMandatory\n and add a \nFailed Validation Message\n something like \nYou must upload a completed budget using the provided Excel template\n.\n Enter \nxlsx\n for allowed file type to ensure applicants can only upload the correct file format. \n After the July 2020 upgrade you may need to set the \nMinimum Number of Files\n to \n1\n.\n Toggle on \nEnable Excel Parsing\n. \n \nSave\n the custom field.\nField Mappings on the Multi-File Upload Field\nPreviously we set up a field for the applicant to upload the completed spreadsheet and we created a spreadsheet with named cells or groups of cells. Now we need to tell your system what data we want to parse, and what we want to do with that data. Typically you will either populate a custom field with one or more values from the spreadsheet or as in this example we will create level 2 activities based on rows from the completed spreadsheet.\n On the Multi-File Upload custom field we set previously with \nEnable Excel Parsing\n will see a new section near the top called \nField Mappings\n. This is where we define what will be parsed to where.\n If you have already created the activity custom fields you want to map to, you will need to get the custom field IDs for each. Otherwise you need to create the desired activity custom fields.\n \nCustom field IDs are found on each custom field's configuration page near the top\n If you followed the instructions above you can place the following into the \nField Mappings\n input and replace Custom Field IDs with your desired custom field IDs \n \nCode entered into Field Mappings\n Click \nSave\n.\nNow you can test out the entire process from the applicants point of view and watch the activities get created and populated with data upon upload of the completed spreadsheet.\nNote: if it does not parse correctly, start by checking that the names defined in your spreadsheet match the names in the field mapping, and check that the custom field IDs are correct. For more information on the Syntax see below.\nUpdating Existing Custom Fields and Activities\nThe applicant can upload a modified Excel template at any time to update the custom fields and activities. Please note if you need to change your template by moving or removing rows or columns, the data may not parse correctly after such modifications. Depending on the configuration you may be able to go to the field data and replace values to clear out what was previously uploaded and then upload a new completed spreadsheet again to repopulate. Also note the name of the activity must remain the same if you want to update it. If an activity has been renamed and a new spreadsheet has been uploaded a new activity will be created instead of updating the existing one.\nConfiguration - Advanced\nActivity Syntax and Field Mappings\nWhen you are mapping cells in your spreadsheet to fields in your system you can either map to the same record or you can create activities.\nThe example above showed how to map to activities. Where the syntax opens and closes with a square bracket \n[]\n then each set of activities are encapsulated in curly brackets \n{}\n and separated by a comma \n,\n.\nInside the curly brackets you call the field/property in quotes, for example \n\"name\"\n for the name of the activity or \n\"[cf_3980270]\"\n for a custom field on the activity or \n\"sheet\"\n for the sheet within the excel document where the data is located.\nThis is followed by a colon \n:\n to separate the field from the cell being parsed.\nAfter the colon enter the named cell you defined in the spreadsheet and do so in quotes. Example \n\"Equipment\"\n if you named the cell in the spreadsheet \nEquipment\n. Alternatively if you declared a starting cell, example: \n\"startcell\": \"StartingEquipment\",\n you can call each cell in that row using \ncol_1\n, \ncol_2\n, etc. Example \n\"[cf_1111112]\": \"col_1\",\n this will create an activity for each row mapping the columns as defined until the parser comes to a row with a blank first value. At this point the parser will stop and move to the next set of activities to parse and create.\nLastly add a comma \n,\n to separate each field/property to cell name mapping.\nNote: if you enter a name mapping that does not exist, the parser will fail and may create only 1 activity or none.\nSame Record Syntax and Field Mappings\nAlternatively, if you don’t want to create activities you can populate fields on the record. For example you could map a cell to a custom field such as a \nText Box - Text Single Line\n or multiple cells with one name to a single field such as a \nBasic Data Table\n. \nIf you want to map multiple cells in your Excel template to a basic data table using a range of cells you can do so by doing the same as listed above, except instead of selecting a single cell and naming it in the Excel spreadsheet you select and name a set of cells example A1 to E5.\nAlso in this scenario the syntax is different. The syntax for custom fields is : [CustomFieldName1]=PersonnelTable;[CustomFieldName2]=SummaryTable\nIn this example the custom field name goes between square brackets \n[]\n, followed by an equals sign \n=\n followed by the name you gave the cell or cell group in your excel spreadsheet.\nlastly , each mapping is separated by a semicolon \n;\nNote: if you are populating a basic data table, you must set that custom field to \nDeny Modification\n, otherwise it will not update, and the current screen values will overwrite the parsed values on save.\nSettings Explained\nField Mappings Syntax for Creating Activities\nExample\nDescription\n[]\nStart and end with square brackets\n{},\nEach set of activities to be created are wrapped in curly brackets and separated by a coma, inside the brackets you will specify the mappings like \"sheet\": \"Sheet1\",\n\"field/property\":\"name\"\nInside the curly brackets you find the specific mappings which are the field/property to set and the name you gave the cell in the spreadsheet. If you are referencing a custom field wrap it in square brackets inside the quotes example \"[cf_1111112]\": \"col_1\",\n\"sheet\": \"Sheet1\",\n\"Sheet1\" is the name you gave your sheet inside your excel document. If you gave your sheet another name change this value.\n\"record\": \"activity\",\n\"activity\" creates child records, empty for current record or \"peer\" for creating activities of same parent record.\n\"rowasrecord\": \"true\",\n\"True\" tells the system to create a new activity record for each row in the spreadsheet.\n\"type\": \"Budget\",\n\"Budget\" tells the system which activity type to create. Change this value to the desired type name in your system.\n\"status\": \"Draft\",\n\"Draft\" tells the system what status to set the activity to. Change this to match the desired status in your system.\n\"startcell\": \"StartingSalaries\",\n\"StartingSalaries\" is the name you gave the starting cell in your Excel Spreadsheet\n\"name\": \"col_1\",\n\"col_1\" is the column of data used for the level 2 name (subject standard field). Note: the name entered for “col_1” is used by the parser to reference and update that activity. Once an activity is created, the “col_1” name should not be changed. If a user changes the name of an activity found in “col_1” and uploads an updated spread sheet, the parser will not be able to update the existing activity and as such will create a new activity using the new name.\n\"[cf_3980270]\": \"Salaries\",\n\"[cf_3980270]\" is the custom field ID and \"Salaries\" is the named cell in the spreadsheet. The value in this cell will be used to populate this custom field.\n\"[cf_3980271]\": \"col_1\",\n\"[cf_3980271]\" is the custom field \"col_1\" is where the data will be pulled from based on the defined startcell which is named in the spreadsheet.\nField Mappings Syntax for Same Record\nWhen populating custom fields on the same record the syntax is much simpler. Wrap the custom field in square brackets, add an equal sign then enter the name as defined in excel spread sheet for the desired cell or set of cells.\nIf you want to populate multiple fields, separate them with a semicolon.\nExample:\n[fieldname1]=NameInExcel1;[fieldname2]=NameInExcel2\nTroubleshooting Tips\n Ensure the template file extension is \n.xlsx\n When updating custom fields on the same record, the custom fields must be set to \nDeny Modify\n \n Retrieved from ‘\nhttps://wiki.smartsimple.com/index.php?title=Excel_Parser&oldid=40370\n’ \nCategory\n: \nTools",
  "links": [],
  "images": [
    "https://wiki.smartsimple.com/images/4/46/Excel-parser-2020-instructions.png",
    "https://wiki.smartsimple.com/images/2/2f/Excel-parser-2020-spreadsheet.png",
    "https://wiki.smartsimple.com/images/3/3e/Excel-parser-2020-upload.png",
    "https://wiki.smartsimple.com/images/0/0d/Excel-parser-2020-activities.png",
    "https://wiki.smartsimple.com/images/7/7a/Excel-parser-2020-delete.png",
    "https://wiki.smartsimple.com/images/2/2f/Excel-parser-2020-spreadsheet.png",
    "https://wiki.smartsimple.com/images/0/0e/Excel-parser-2020-spreadsheet-namebox.png",
    "https://wiki.smartsimple.com/images/8/88/Excel-parser-2020-spreadsheet-selectall.png",
    "https://wiki.smartsimple.com/images/a/a3/Excel-parser-2020-spreadsheet-locked.png",
    "https://wiki.smartsimple.com/images/2/22/Excel-parser-2020-spreadsheet-protect.png",
    "https://wiki.smartsimple.com/images/8/80/Excel-parser-2020-smartfolders.png",
    "https://wiki.smartsimple.com/images/c/ca/Excel-parser-2020-smartfolders-url.png",
    "https://wiki.smartsimple.com/images/c/c3/Excel-parser-2020-instruct-code1.png",
    "https://wiki.smartsimple.com/images/f/fd/Excel-parser-2020-instruct-code2.png",
    "https://wiki.smartsimple.com/images/4/46/Excel-parser-2020-instructions.png",
    "https://wiki.smartsimple.com/images/6/63/Excel-parser-2020-fieldid.png",
    "https://wiki.smartsimple.com/images/1/14/Excel-parser-2020-field-mapping-code.png"
  ]
}